ipynb code walkthrough - 
face_to_embeddings(img) - to detect a face using haarcascade model for the image provided. Get the coordinates of the rectangle which marks the face to draw it on the image. Convert the face into embeddings using facenet.
Stored the images of people in a folder, so when the program restarts, it looks into the folder, converts the faces into embeddings and stores them in face dictionary(name : embedding). The dictionary is also stored as a pickle file to avoid re calculating the embeddings every time.
verify_face() - takes a frame from the running video input from the camera, finds face using haarcascade, converts it to embedding using facenet, compares the embeddings of already present faces from face dictionary using dot product. It calculates the maximum dot product achieved from the dictionary, if its above a threshold, then the name corresponding to the embedding with maximum dot product is the name of the person in front of camera, else unknown person.
register_face() - takes the face captured by camera, stores it in pictures folder, calculates its embedding and stores it in the dictionary.
delete_face() - identifies the face in front of camera, deletes it from the dictionary and pictures folder.


FaceNet - FaceNet was trained using the triplet loss function. FaceNet produces an embedding size of 128 dimensions.
The triplet loss function is defined as:
L=max(d(a,p)−d(a,n)+α,0)
Where:
a is the anchor (the original face image).
p is the positive sample (a different image of the same person).
n is the negative sample (an image of a different person).
d(x,y) is the distance between two embeddings (typically Euclidean distance).
α is a margin that ensures the negative pair is not just as close as the positive pair.

HaarCascade - Uses haarlike features (manually determined) to identify faces. the features are calculated by  finding out the difference of the average of the pixel values at the darker region and the average of the pixel values at the lighter region. If the difference is close to 1, then there is an edge detected by the haar feature.

Siamese Neural Networks - Uses the concept of one shot learning.
